import WordCount.*;

import java.io.IOException;

/**
 * 1. Необходимо выполнить подсчет топ 100 слов параллельно.
 Количество потоков должно быть равно числу доступных процессоров в системе
 (Runtime.getRuntime().availableProcessors()). Каждый поток собирает свой результат (Map)
 , а потом сливает в общий (Map). Первый поток
 , который создавал другие треды должен ожидать их завершения с помощью метода join() и выводить результат.

 Не забывайте использовать синхронизацию при доступе к общим ресурсам.

 2. Пиццерия. Есть клиент (main), официант (waiter), повар (cooker).
 официант и повар спят, пока не появится клиент. Клиент составляет заказ и будит официанта
 , официант, относит заказ повару и будит его.
 Повар готовит и возвращает блюдо. Каждый из потоков после выполнения задачи засыпает.

 а) Повар просто возвращает блюдо (пишет в консоль).
 б) Повар будит клиента и отдает ему блюдо.
 в) Повар будит официанта и передает ему блюдо, официант будит клиента и отдает заказ.
 */
public class Main {
    public static void main(String[] args) throws IOException, InterruptedException {

        WordCount wct  = new WordCount(null);
        wct.showTopNWords(10);


    }
}
